# 다이나믹 프로그래밍
# 식량창고가 일직선으로 이어져 있다.
# 각 식량창고에는 정해진 수의 식량이 있으며, 선택적으로 약탈하여 최대한 많은 식량을 얻으려 한다.
# 정찰병에게 들키지 않고 약탈하기 위해서는 최소 1칸 이상 떨어진 식량창고를 약탈해야 한다.

# 첫째 줄에 식량창고 개수 N이 주어진다 (3 <= N <= 100)

def solution(N, array):
    # 1. 0번부터 털지, 1번부터 털지
    # 2. 마지막 i칸을 털지, i칸을 털지
    #    2-1. i칸 털면 (i-2)칸을 털어야 한다.
    #    2-2. (i-1)칸을 털면 (i-3)을 털어야 한다.

    d = [0] * 100
    d[0] = array[0]
    d[1] = max(d[0], array[1])
    for i in range(2, N):
        d[i] = max(array[i] + d[i - 2], d[i - 1])

    return d[N - 1]


print(solution(N=4, array=[1, 3, 1, 5]))
